# Specifying SAM2 install directory location 
sam2_install_dir: "/path/to/sam2/sam2/"

# Directory containing JPGs corresponding to the frames of the video
frame_dir: "/path/to/frames"

######################################################
# build_sam2_video_predictor specific configurations #
######################################################

sam2_checkpoint: "/path/to/sam2/checkpoints/sam2.1_hiera_large.pt"
model_cfg: "configs/sam2.1/sam2.1_hiera_l.yaml"

# Whether to apply non-overlapping constraints on the output object masks
non_overlap_masks: False

########################################
# annotation specific configurations   #
########################################

# The FPS of the unreduced video that the annotations were 
# initially meant for
fps: 24

# Value the ensures the annotated frame value matches up 
# with the fames that will be ingested by SAM2
SAM2_start: 0

# File specifying annotations for video frames 
annotations_file: "/path/to/test_annotations.npy" 

# Key in the annotation corresponding to SAM2 frame_idx
frame_idx_name: 'Frame'

# Key in the annotation corresponding to SAM2 obj_id
obj_id_name: 'fishLabel'

# Key in the annotation corresponding to SAM2 points
points_name: 'Location'

# Key in the annotation corresponding to SAM2 labels
labels_name: 'clickType'

#################################################
# set_inference_state specific configurations   #
#################################################

# Whether to offload the video frames to CPU memory.
# Turning on this option saves the GPU memory with only a very small overhead
offload_video_to_cpu: True

# Whether to offload the state to CPU memory. 
# Turning this option on can save GPU memory
offload_state_to_cpu: True

# Lazy load images, can conserve memory, if it is needed
async_loading_frames: False

###########################################
# run_propagation specific configurations #
###########################################

# If True, draw segmentation masks on top of frames and save the generated JPGs to jpg_save_dir
# Note that jpg_save_dir must have all frames in it, if copy_frame_dir is False
save_jpgs: True

# If True, will copy the directory specified by frame_dir to jpg_save_dir at runtime 
copy_frame_dir: True

# The full path to the directory we want to save frames with segmentation masks drawn on them
jpg_save_dir: './generated_jpgs'

# If True, save the generated masks in a dictionary with sparse tensor values and save it as 
# a pkl file defined by masks_dict_file
save_masks: True

# The location you want to save the dictionary of masks 
masks_dict_file: './generated_frame_masks.pkl'

# Font size for drawn object IDs
font_size: 100

# Color of font for the drawn object IDs
font_color: "red"

# Alpha value for the drawn segmentation masks
alpha: 0.6

###################################
# Video creation specific configs #
###################################

# The name of the video file to be created
video_file: "./test_video.mp4"

# The frames per second for the video. Should also be the frame rate of extraction. 
video_fps: 3

# Specifies the frame size for the video, with the first element 
# representing the width and the second corresponding to the height
video_frame_size: [600, 400]